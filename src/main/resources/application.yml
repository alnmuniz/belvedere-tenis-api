spring:
  application:
    name: tenis-api
  profiles:
    active: dev,secret
    
  # Configuração do Banco de Dados (PostgreSQL no Docker)
  datasource:
    url: jdbc:postgresql://localhost:5432/tennis_court
    username: admin
    password: mysecretpassword
    driver-class-name: org.postgresql.Driver
  
  # Configuração do Liquibase
  liquibase:
    change-log: classpath:db/changelog/db.changelog-master.xml
    default-schema: belvedere
    liquibase-schema: public
  
  # Configuração do JPA/Hibernate
  jpa:
    # 'validate' garante que o Hibernate não tente criar tabelas, apenas valide se as Entidades Java batem com o que o Liquibase criou.
    hibernate:
      ddl-auto: validate
    # Mostra no console o SQL gerado pelo Hibernate. Ótimo para debug!
    show-sql: true
    # Desabilita o padrão "Open Session In View" do Spring.
    open-in-view: false
    properties:
      hibernate:
        format_sql: true
        default_schema: belvedere

# Configuração do Spring Actuator
management:
  endpoints:
    web:
      exposure:
        include: health,info,metrics
  endpoint:
    health:
      show-details: always
      show-components: always
  health:
    db:
      enabled: true
    diskspace:
      enabled: true

auth0:
  audience: https://belvedere.tenis.api
  #issuer-uri: https://dev-xvezaz1t34nrsh0d.us.auth0.com/ 

app:
  security:
    oauth2:
      resourceserver:
        jwt:
          # ESTA É A PROPRIEDADE PADRÃO QUE O SPRING PROCURA
          issuer-uri: "https://dev-xvezaz1t34nrsh0d.us.auth0.com/"
#    options:
#      authority: "https://dev-xvezaz1t34nrsh0d.us.auth0.com/"
#      audience: "https://belvedere.tenis.api"
    public-get-routes:
    - "/api/public/invitations/**"
    public-post-routes:
    - "/api/public/register"